apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: "org.sonarqube"

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    testBuildType "qa"

    defaultConfig {

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

    }

    buildTypes {

        debug {
            matchingFallbacks = ['debug']
        }

        qa {
            matchingFallbacks = ['debug']
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true

        // if true, stop the gradle build if errors are found
        abortOnError false

        // do not ignore warnings
        warningsAsErrors true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    configurations {
        childTestDependencies.extendsFrom testImplementation
    }

    configurations.all {

        resolutionStrategy {
            resolutionStrategy.force "com.google.guava:guava:$guavaVersion"
            resolutionStrategy.force "com.google.code.findbugs:jsr305:$findBugsVersion"

            resolutionStrategy.force "org.objenesis:objenesis:$objenesisVersion"
            resolutionStrategy.force "net.bytebuddy:byte-buddy:$byteBuddyVersion"
            resolutionStrategy.force "net.bytebuddy:byte-buddy-agent:$byteBuddyVersion"

            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()
        }

        resolutionStrategy.force "org.codehaus.plexus:plexus-utils:$plexusVersion"
    }
}

dependencies {

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    api "androidx.annotation:annotation:$appcompatVersion"

    implementation ("androidx.loader:loader:$loaderVersion") {
        exclude group: 'androidx.annotation', module: 'annotation'
        exclude group: 'androidx.core', module: 'core'
    }

    implementation ("androidx.vectordrawable:vectordrawable-animated:$vectorDrawableVersion") {
        exclude group: 'androidx.annotation', module: 'annotation'
        exclude group: 'androidx.vectordrawable', module: 'vectordrawable'
    }

    implementation ("androidx.legacy:legacy-support-core-utils:$androidLegacyVersion") {
        exclude group: 'android.loader', module: 'loader'
        exclude group: 'androidx.annotation', module: 'annotation'
        exclude group: 'androidx.core', module:'core'
    }

    implementation ("androidx.appcompat:appcompat:$appcompatVersion") {
        exclude group: 'androidx.vectordrawable', module: 'vectordrawable-animated'
        exclude group: 'androidx.annotation', module: 'annotation'
        exclude group: 'androidx.core', module:'core'
    }

    api "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    api ("io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"){
        exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
    }

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$rootProject.kotlinVersion"
    testImplementation ("org.mockito:mockito-core:$mockitoVersion") {
        exclude group: 'org.objenesis', module: 'objenesis'
    }

    testImplementation ("org.powermock:powermock-module-junit4:$powermockVersion") {
        exclude group: 'org.mockito', module: 'mockito-core'
        exclude group: 'net.bytebuddy', module: 'byte-buddy'
        exclude group: 'net.bytebuddy', module: 'byte-buddy-agent'
    }
    testImplementation ("org.powermock:powermock-module-junit4-rule:$powermockVersion") {
        exclude group: 'net.bytebuddy', module: 'byte-buddy'
        exclude group: 'net.bytebuddy', module: 'byte-buddy-agent'
    }

    testImplementation ("org.powermock:powermock-api-mockito2:$powermockVersion") {
        exclude group: 'org.mockito', module: 'mockito-core'
    }
    testImplementation "org.powermock:powermock-classloading-xstream:$powermockVersion"
    testImplementation ("org.robolectric:robolectric:$robolectricVersion") {
        exclude group: 'androidx.annotation', module: 'annotation'
        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
        exclude group: 'org.codehaus.plexus', module:'plexus-utils'
    }
}

apply from: "../jacoco.gradle"
apply from: "../jacoco_global.gradle"

project.afterEvaluate {
    tasks['sonarqube'].with {
        dependsOn.clear()
        dependsOn 'createGlobalSkeletoidUnitTestReport'
    }
}


sonarqube {
    properties {

        property "sonar.sources", "src"
        property "sonar.exclusions", "**/*test*/**,build/**,*.iml,**/*generated*,**extensions**"
        property "sonar.tests", "./src/test/"
        property "sonar.test.inclusions", "**/*test*/**"
        property "sonar.import_unknown_files", true

        property "sonar.java.binaries", "${buildDir}/intermediates/javac/${android.testBuildType}/compile${android.testBuildType.capitalize()}JavaWithJavac/classes,${buildDir}/tmp/kotlin-classes/${android.testBuildType}UnitTest"
        property "sonar.java.source", "base/src/main/java"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", fileTree(dir: "${rootProject.buildDir}/reports/jacoco/", includes: ["**/createGlobalSkeletoidUnitTestReport.xml"])
        property "sonar.jacoco.itReportPath", fileTree(dir: "${buildDir}/outputs/code-coverage/connected/", includes: ["**/*.ec"])
        property "sonar.android.lint.report", "${buildDir}/outputs/lint-results.xml"
    }
}
