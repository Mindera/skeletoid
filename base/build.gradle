apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
apply plugin: "org.sonarqube"

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    testBuildType "qa"

    defaultConfig {

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

    }

    buildTypes {

        debug {
            matchingFallbacks = ['debug']
        }

        qa {
            matchingFallbacks = ['debug']
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true

        // if true, stop the gradle build if errors are found
        abortOnError false

        // do not ignore warnings
        warningsAsErrors true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    configurations.all {
        resolutionStrategy {
            resolutionStrategy.force "com.android.support:support-annotations:$supportLibraryVersion"
            // annotation processor conflicts
            resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
            // lint conflicts
            resolutionStrategy.force "org.apache.httpcomponents:httpcore:$httpComponentsVersion"
            resolutionStrategy.force "com.google.guava:guava:$guavaVersion"
            // powermock
            resolutionStrategy.force "org.objenesis:objenesis:2.5"

            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.kotlinVersion"

    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxJavaVersion"
    implementation ("io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroidVersion"){
        exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
    }

    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.powermockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$rootProject.powermockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.powermockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$rootProject.powermockVersion"
    testImplementation("org.robolectric:robolectric:$rootProject.robolectricVersion") {
        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
        exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
    }
}

jacoco {
    toolVersion "0.8.1"
}

//Unit Test Coverage filtered - Note: This is currently NOT being used on the Codacy report. This is to run locally if needed
task createSkeletoidUnitTestReport(type: JacocoReport, dependsOn: ['testQaUnitTest',
                                                          ':analytics-firebase:createSkeletoidUnitTestReport',
                                                          ':kt-extensions:createSkeletoidUnitTestReport',
                                                          ':rxbindings:createSkeletoidUnitTestReport'
]) {

    reports {
        html.enabled = true
    }

    def fileFilter = [
            //Android stuff
            '**/R.class',
            '**/BR.class',
            '**/R$*.class',
            '**/BR$*.class',
            '**/BuildConfig.*',
            'android/**/*.*',
            '**/Manifest*.*',
            //Data Binding
            '**/*databinding/**/*.*',
            //Test
            '**/**Test*.*']

    //To support Java coverage on Unit tests
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/qa/compileQaJavaWithJavac/classes", excludes: fileFilter)
    //To support Kotlin coverage on Unit tests
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/qaUnitTest", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"
    def debugSrc = "${project.projectDir}/src/debug/java"

    sourceDirectories = files([mainSrc, debugSrc])


    classDirectories = files([debugTree], [kotlinDebugTree])
    executionData = files("${buildDir}/jacoco/testQaUnitTest.exec")
}

tasks['sonarqube'].with {
    dependsOn.clear()
    dependsOn createSkeletoidUnitTestReport
}

sonarqube {
    properties {

        property "sonar.sources", "src"
        property "sonar.exclusions", "**/*test*/**,build/**,*.iml,**/*generated*,**extensions**"
        property "sonar.tests", "./src/test/"
        property "sonar.test.inclusions", "**/*test*/**"
        property "sonar.import_unknown_files", true

        property "sonar.java.binaries", "${buildDir}/intermediates/javac/qa/compileQaJavaWithJavac/classes,${buildDir}/tmp/kotlin-classes/qaUnitTest"
        property "sonar.java.source", "base/src/main/java"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPaths", fileTree(dir: "${buildDir}/jacoco/", includes: ["**/*.exec"])
        property "sonar.jacoco.itReportPath", fileTree(dir: "${buildDir}/outputs/code-coverage/connected/", includes: ["**/*.ec"])
        property "sonar.android.lint.report", "${buildDir}/outputs/lint-results.xml"
    }
}
