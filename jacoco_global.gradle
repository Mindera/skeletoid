apply plugin: 'jacoco'

jacoco {
    toolVersion "0.8.1"
}

rootProject.afterEvaluate {
    def testCoverageBuildType = rootProject.getProperties().get('testBuildType') ?: 'qa'
    def testTaskNames = []
    def fileTrees = []
    def coverageSourceDirs = []
    def executionDataDirs = []
    def fileFilter = [
            //Android stuff
            '**/R.class',
            '**/BR.class',
            '**/R$*.class',
            '**/BR$*.class',
            '**/BuildConfig.*',
            'android/**/*.*',
            '**/Manifest*.*',
            //Data Binding
            '**/*databinding/**/*.*',
            //Test
            '**/**Test*.*',
            '**/rxjava.schedulers/Schedulers.kt']

    rootProject.subprojects.collect() { subproject ->
        if (isAndroidProject(subproject)) {
            subproject.android {
                testOptions {
                    unitTests.all {
                        jacoco {
                            includeNoLocationClasses = true
                        }
                    }
                }
            }
        }

        subproject.afterEvaluate {

            testTaskNames.add(":${subproject.name}:test${testCoverageBuildType.capitalize()}UnitTest")

            def javaFileTree = fileTree(
                    dir: "${subproject.buildDir}/intermediates/javac/${testCoverageBuildType}/compile${testCoverageBuildType.capitalize()}JavaWithJavac/classes",
                    excludes: fileFilter
            )
            fileTrees.add(javaFileTree)

            def kotlinFileTree = fileTree(
                    dir: "${subproject.buildDir}/tmp/kotlin-classes/${testCoverageBuildType}",
                    excludes: fileFilter
            )
            fileTrees.add(kotlinFileTree)

            def coverageSourceDir = [
                    "${subproject.projectDir}/src/main/java",
                    "${subproject.projectDir}/src/${testCoverageBuildType}/java"
            ]
            coverageSourceDirs.add(coverageSourceDir)

            def executionDataDir = "${subproject.buildDir}/jacoco/test${testCoverageBuildType.capitalize()}UnitTest.exec"
            executionDataDirs.add(executionDataDir)
        }
    }

    //'qa' is a default test build type. To change run:
    //gradlew createGlobalSkeletoidUnitTestReport -PtestBuildType={yourTestBuildType}
    task createGlobalSkeletoidUnitTestReport(type: JacocoReport, dependsOn: testTaskNames) {
        group = "Reporting"
        description = "Generate Jacoco Global coverage report"

        classDirectories = files(fileTrees)
        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        executionData = files(executionDataDirs)

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

protected static boolean isAndroidProject(final Project project) {
    final boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    final boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}
