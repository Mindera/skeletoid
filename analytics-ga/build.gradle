apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

    }

    buildTypes {
        debug {

        }

        qa {
            matchingFallbacks = ['debug']
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {

    // depends on base module
    api project(path: ':base')
    testImplementation project(path: ':base', configuration: 'childTestDependencies')
    implementation ("com.google.android.gms:play-services-analytics:$playServicesAnalytics")
}

task createUnitTestReport(type: JacocoReport, dependsOn: [':analytics-ga:testQaUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        html.enabled = true
        xml.enabled = true
    }

    def fileFilter = []

    def mainSrc = "$projectDir/src/main/java"
    def qaTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/qa", excludes: fileFilter)

    getSourceDirectories().from(files([mainSrc]))
    getClassDirectories().from(files([qaTree]))
    getExecutionData().from(files("$buildDir/jacoco/testQaUnitTest.exec"))
}
