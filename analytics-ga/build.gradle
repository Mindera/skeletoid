apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

    }

    buildTypes {
        debug{
            
        }
        
        qa{
            matchingFallbacks = ['debug']
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    configurations.all {
        resolutionStrategy {
            resolutionStrategy.force "com.android.support:support-annotations:$supportLibraryVersion"
            // annotation processor conflicts
            resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
            // lint conflicts
            resolutionStrategy.force "org.apache.httpcomponents:httpcore:$httpComponentsVersion"
            resolutionStrategy.force "com.google.guava:guava:$guavaVersion"
            // powermock
            resolutionStrategy.force "org.objenesis:objenesis:2.5"
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()
        }
    }
}

dependencies {

    //Depends on Base Skeletoid
    api project(path: ':base')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation ("com.google.android.gms:play-services-analytics:$rootProject.gaVersion"){
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-core-utils'
        exclude group: 'com.android.support', module: 'support-core-ui'
        exclude group: 'com.android.support', module: 'support-fragment'

    }

    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation ("org.powermock:powermock-module-junit4:$rootProject.powermockVersion"){
        exclude group: 'org.objenesis', module: 'objenesis'
    }
    testImplementation ("org.powermock:powermock-module-junit4-rule:$rootProject.powermockVersion"){
        exclude group: 'org.objenesis', module: 'objenesis'
    }
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.powermockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$rootProject.powermockVersion"
    testImplementation("org.robolectric:robolectric:$rootProject.robolectricVersion") {
        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
        exclude group: 'org.codehaus.plexus', module: 'plexus-utils'

    }

}

jacoco {
    toolVersion "0.8.1"
}

//Unit Test Coverage filtered - Note: This is currently NOT being used on the Codacy report. This is to run locally if needed
task createSkeletoidUnitTestReport(type: JacocoReport, dependsOn: ['testQaUnitTest']) {

    reports {
        html.enabled = true
    }

    def fileFilter = [
            //Android stuff
            '**/R.class',
            '**/BR.class',
            '**/R$*.class',
            '**/BR$*.class',
            '**/BuildConfig.*',
            'android/**/*.*',
            '**/Manifest*.*',
            //Data Binding
            '**/*databinding/**/*.*',
            //Test
            '**/**Test*.*']

    //To support Java coverage on Unit tests
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/qa/compileQaJavaWithJavac/classes", excludes: fileFilter)
    //To support Kotlin coverage on Unit tests
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/qaUnitTest/", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"
    def debugSrc = "${project.projectDir}/src/debug/java"

    sourceDirectories = files([mainSrc, debugSrc])


    classDirectories = files([debugTree], [kotlinDebugTree])
    executionData = files("${buildDir}/jacoco/testQaUnitTest.exec")
}