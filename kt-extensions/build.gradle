apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    testBuildType "qa"

    defaultConfig {

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    buildTypes {

        debug{
            matchingFallbacks = ['debug']
        }

        qa{
            matchingFallbacks = ['debug']
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    configurations.all {
        resolutionStrategy {
            resolutionStrategy.force "com.google.guava:guava:$guavaVersion"
            resolutionStrategy.force "com.google.code.findbugs:jsr305:$findBugsVersion"
            // Robolectric
            resolutionStrategy.force "org.objenesis:objenesis:$objenesisVersion"
            resolutionStrategy.force "net.bytebuddy:byte-buddy:$byteBuddyVersion"
            resolutionStrategy.force "net.bytebuddy:byte-buddy-agent:$byteBuddyVersion"
            resolutionStrategy.force "org.codehaus.plexus:plexus-utils:$plexusVersion"

            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    implementation ("androidx.loader:loader:$loaderVersion") {
        exclude group: 'androidx.annotation', module: 'annotation'
        exclude group: 'androidx.core', module:'core'
    }

    implementation ("androidx.vectordrawable:vectordrawable-animated:$vectorDrawableVersion") {
        exclude group: 'androidx.vectordrawable', module: 'vectordrawable'
    }

    implementation ("androidx.legacy:legacy-support-core-utils:$androidLegacyVersion") {
        exclude group: 'android.loader', module: 'loader'
        exclude group: 'androidx.annotation', module: 'annotation'
        exclude group: 'androidx.core', module:'core'
    }

    implementation ("androidx.appcompat:appcompat:$appcompatVersion") {
        exclude group: 'androidx.vectordrawable', module: 'vectordrawable-animated'
        exclude group: 'androidx.annotation', module: 'annotation'
        exclude group: 'androidx.core', module:'core'
        exclude group: 'androidx.fragment', module: 'fragment'
    }

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation ("org.powermock:powermock-module-junit4:$powermockVersion") {
        exclude group: 'org.mockito', module: 'mockito-core'
    }
    testImplementation "org.powermock:powermock-module-junit4-rule:$powermockVersion"
    testImplementation ("org.powermock:powermock-api-mockito2:$powermockVersion") {
        exclude group: 'org.mockito', module: 'mockito-core'
    }
    testImplementation "org.powermock:powermock-classloading-xstream:$powermockVersion"
    testImplementation ("org.robolectric:robolectric:$robolectricVersion") {
        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
    }
}

jacoco {
    toolVersion "0.8.1"
}

//Unit Test Coverage filtered
task createSkeletoidUnitTestReport(type: JacocoReport, dependsOn: ['testQaUnitTest']) {

    reports {
        html.enabled = true
    }

    def fileFilter = [
            //Android stuff
            '**/R.class',
            '**/BR.class',
            '**/R$*.class',
            '**/BR$*.class',
            '**/BuildConfig.*',
            'android/**/*.*',
            '**/Manifest*.*',
            //Data Binding
            '**/*databinding/**/*.*',
            //Test
            '**/**Test*.*']

    //To support Java coverage on Unit tests
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/qa/compileQaJavaWithJavac/classes", excludes: fileFilter)
    //To support Kotlin coverage on Unit tests
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/qaUnitTest", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"
    def debugSrc = "${project.projectDir}/src/debug/java"

    sourceDirectories = files([mainSrc, debugSrc])


    classDirectories = files([debugTree], [kotlinDebugTree])
    executionData = files("${buildDir}/jacoco/testQaUnitTest.exec")
}
