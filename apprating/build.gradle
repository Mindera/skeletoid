apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    testBuildType "qa"

    defaultConfig {

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

    }

    buildTypes {

        debug {
            matchingFallbacks = ['debug']
        }

        qa {
            matchingFallbacks = ['debug']
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation project(path: ':base')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.kotlinVersion"
    implementation "androidx.fragment:fragment:$rootProject.androidxFragmentVersion"

    //WorkManager
    implementation("androidx.work:work-runtime-ktx:$rootProject.workManagerVersion")

    //Tests
    testImplementation "org.jetbrains.kotlin:kotlin-test:$rootProject.kotlinVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.powermockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$rootProject.powermockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.powermockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$rootProject.powermockVersion"
    testImplementation("org.robolectric:robolectric:$rootProject.robolectricVersion")
}

task createUnitTestReport(type: JacocoReport, dependsOn: [':apprating:testQaUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        html.enabled = true
        xml.enabled = true
    }

    def fileFilter = [
        "**/callbacks/**",
        "**/dialogs/**",
        "**/job/**",
        "**/store/**",
        "**/AppRatingInitialiser*.*"
    ]

    def mainSrc = "$projectDir/src/main/java"
    def qaTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/qa", excludes: fileFilter)

    getSourceDirectories().from(files([mainSrc]))
    getClassDirectories().from(files([qaTree]))
    getExecutionData().from(files("$buildDir/jacoco/testQaUnitTest.exec"))
}
