apply plugin: 'jacoco'

// https://medium.com/@azizbekian/setup-jacoco-sonarqube-in-multimodule-multiflavor-kotlin-android-project-d8e7b27aed36

jacoco {
    toolVersion "0.8.5"
}

if (isAndroidProject(project)) {
    project.android {
        testOptions {
            unitTests.all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
}

project.afterEvaluate {
    def testCoverageBuildType = rootProject.getProperties().get('testBuildType') ?: 'qa'

    //Remember to change in sonarqube build.gradle config
    def fileFilter = [
            //Android stuff
            '**/R.class',
            '**/BR.class',
            '**/R$*.class',
            '**/BR$*.class',
            '**/BuildConfig.*',
            'android/**/*.*',
            '**/Manifest*.*',
            //Data Binding
            '**/*databinding/**/*.*',
            //Test
            '**/**Test*.*',
            //UI Related items that make no sense to add unit tests to
            '**/views/*.*',
            '**/dialogs/*.*',
            '**/animation/*.*',
            '**/UnfreezeScreenActivity.*',
            //RxJava that also make no sense to test
            '**/Schedulers.*',
            //No logic utils
            '**/utils/http/HttpCodes.*'
    ]

    //'qa' is a default test build type. To change run:
    //gradlew createGlobalSkeletoidUnitTestReport -PtestBuildType={yourTestBuildType}
    task createModuleUnitTestReport(type: JacocoReport, dependsOn: ":$project.name:test${testCoverageBuildType.capitalize()}UnitTest") {
        group = "Reporting"
        def javaFileTree = fileTree(
                dir: "${project.buildDir}/intermediates/javac/${testCoverageBuildType}/classes",
                excludes: fileFilter
        )

        def kotlinFileTree = fileTree(
                dir: "${project.buildDir}/tmp/kotlin-classes/${testCoverageBuildType}",
                excludes: fileFilter
        )

        def coverageSourceDirs = [
                "src/main/java",
                "src/${testCoverageBuildType}/java"
        ]

        getClassDirectories().from(files([javaFileTree, kotlinFileTree]))
        getAdditionalSourceDirs().from(files(coverageSourceDirs))
        getSourceDirectories().from(files(coverageSourceDirs))
        getExecutionData().from(files("${project.buildDir}/jacoco/test${testCoverageBuildType.capitalize()}UnitTest.exec"))
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

protected static boolean isAndroidProject(final Project project) {
    final boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    final boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}
